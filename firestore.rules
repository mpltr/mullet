rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is the owner of a document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Note: Removed isHomeMember helper to avoid circular dependency
    // Home membership is now checked directly in each rule
    
    // Note: Removed isHomeOwner helper to avoid circular dependency
    // Home ownership is now checked directly in each rule where the resource is available
    

    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      
      // Allow other authenticated users to read basic user info
      allow read: if isAuthenticated();
    }

    // Homes collection
    match /homes/{homeId} {
      // Any authenticated user can read basic home info (needed for invitations)
      // Write operations are still restricted to members/owners
      allow read: if isAuthenticated();
      
      // Only authenticated users can create homes
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.createdBy &&
                       request.auth.uid in request.resource.data.members;
      
      // Home owners can update home data
      // OR users can add themselves to members (accepting invitation)
      // OR users can remove themselves from members (leaving home)
      allow update: if isAuthenticated() && 
                       (request.auth.uid == resource.data.createdBy ||
                        (request.auth.uid in request.resource.data.members &&
                         !(request.auth.uid in resource.data.members)) ||
                        (request.auth.uid in resource.data.members &&
                         !(request.auth.uid in request.resource.data.members)));
      
      // Only home owners can delete homes
      allow delete: if isAuthenticated() && 
                       request.auth.uid == resource.data.createdBy;
    }

    // Rooms collection
    match /rooms/{roomId} {
      // Users can read rooms if they're a member of the home that owns the room
      allow read: if isAuthenticated() && 
                     request.auth.uid in get(/databases/$(database)/documents/homes/$(resource.data.homeId)).data.members;
      
      // Users can create rooms if they're a member of the home
      allow create: if isAuthenticated() && 
                       request.auth.uid in get(/databases/$(database)/documents/homes/$(request.resource.data.homeId)).data.members;
      
      // Users can update/delete rooms if they're a member of the home
      allow update, delete: if isAuthenticated() && 
                               request.auth.uid in get(/databases/$(database)/documents/homes/$(resource.data.homeId)).data.members;
    }

    // Tasks collection
    match /tasks/{taskId} {
      // Users can read tasks if they're a member of the home that owns the task
      allow read: if isAuthenticated() && 
                     request.auth.uid in get(/databases/$(database)/documents/homes/$(resource.data.homeId)).data.members;
      
      // Users can create tasks if they're a member of the home and the creator
      allow create: if isAuthenticated() && 
                       request.auth.uid in get(/databases/$(database)/documents/homes/$(request.resource.data.homeId)).data.members &&
                       request.auth.uid == request.resource.data.createdBy;
      
      // Users can update tasks if they're a member of the home
      allow update: if isAuthenticated() && 
                       request.auth.uid in get(/databases/$(database)/documents/homes/$(resource.data.homeId)).data.members;
      
      // Only task creators can delete tasks (home owner delete handled by app logic)
      allow delete: if isAuthenticated() && 
                       request.auth.uid == resource.data.createdBy;
    }

    // Home invitations collection
    match /home_invitations/{inviteId} {
      // Users can read invitations where they are the invitee or inviter
      allow read: if isAuthenticated() && 
                     (request.auth.token.email == resource.data.invitedEmail ||
                      request.auth.uid == resource.data.invitedBy);
      
      // Only authenticated users can create invitations (app logic ensures proper home membership)
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.invitedBy &&
                       request.resource.data.status == 'pending';
      
      // Invited users can update invitation status (accept/decline)
      // Inviters can also update (revoke)
      allow update: if isAuthenticated() && 
                       (request.auth.token.email == resource.data.invitedEmail ||
                        request.auth.uid == resource.data.invitedBy);
      
      // Invited users and inviters can delete invitations
      allow delete: if isAuthenticated() && 
                       (request.auth.token.email == resource.data.invitedEmail ||
                        request.auth.uid == resource.data.invitedBy);
    }

    // Habits collection
    match /habits/{habitId} {
      // Users can read habits if they're a member of the home that owns the habit
      allow read: if isAuthenticated() && 
                     request.auth.uid in get(/databases/$(database)/documents/homes/$(resource.data.homeId)).data.members;
      
      // Users can create habits if they're a member of the home and the creator
      allow create: if isAuthenticated() && 
                       request.auth.uid in get(/databases/$(database)/documents/homes/$(request.resource.data.homeId)).data.members &&
                       request.auth.uid == request.resource.data.createdBy;
      
      // Users can update habits if they're a member of the home
      allow update: if isAuthenticated() && 
                       request.auth.uid in get(/databases/$(database)/documents/homes/$(resource.data.homeId)).data.members;
      
      // Only habit creators can delete habits (home owner delete handled by app logic)
      allow delete: if isAuthenticated() && 
                       request.auth.uid == resource.data.createdBy;
    }

    // Groups collection
    match /groups/{groupId} {
      // Users can read groups if they're a member of the home that owns the group
      allow read: if isAuthenticated() && 
                     request.auth.uid in get(/databases/$(database)/documents/homes/$(resource.data.homeId)).data.members;
      
      // Users can create groups if they're a member of the home
      allow create: if isAuthenticated() && 
                       request.auth.uid in get(/databases/$(database)/documents/homes/$(request.resource.data.homeId)).data.members;
      
      // Users can update/delete groups if they're a member of the home
      allow update, delete: if isAuthenticated() && 
                               request.auth.uid in get(/databases/$(database)/documents/homes/$(resource.data.homeId)).data.members;
    }

    // Task completions collection
    match /task_completions/{completionId} {
      // Users can read task completions for tasks they're authorized to see
      allow read: if isAuthenticated() && 
                     request.auth.uid in get(/databases/$(database)/documents/homes/$(resource.data.homeId)).data.members;
      
      // Only authenticated users can create completions (app logic ensures proper task authorization)
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.completedBy;
      
      // No updates allowed on completions (they're immutable history)
      allow update: if false;
      
      // Only creators can delete their own completions
      allow delete: if isAuthenticated() && 
                       request.auth.uid == resource.data.completedBy;
    }

    // Habit completions collection
    match /habit_completions/{completionId} {
      // Users can read habit completions for their home
      allow read: if isAuthenticated() && 
                     request.auth.uid in get(/databases/$(database)/documents/homes/$(resource.data.homeId)).data.members;
      
      // Only authenticated users can create completions
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.completedBy;
      
      // No updates allowed on completions (they're immutable history)
      allow update: if false;
      
      // Only creators can delete their own completions
      allow delete: if isAuthenticated() && 
                       request.auth.uid == resource.data.completedBy;
    }
  }
}